#!/opt/pwn.college/python

import shutil
import socket
import sys
import os

CATEGORIZED_CHALS = [
    [
        "exposes you to very simple programs that let you directly read the flag",
        [ "cat", "more", "less", "tail", "head", "sort" ]
    ],
    [
        "shows you that an over-privileged editor is a very powerful tool, indeed",
        [ "vim", "emacs", "nano" ]
    ],
    [
        "require you to understand their output to derive the flag from it",
        [ "rev", "od", "hd", "xxd", "base32", "base64", "split" ]
    ],
    [
        "force you to understand different archive formats",
        [ "gzip", "bzip2", "zip", "tar", "ar", "cpio", "genisoimage" ]
    ],
    [
        "will enable you to read flags by making them execute other commands",
        [ "env", "find", "make", "nice", "timeout", "stdbuf", "setarch", "watch", "socat" ]
    ],
    [
        "will require some light programming to read the flag.",
        [ "whiptail", "awk", "sed", "ed" ]
    ],
    [
        "let you get the flag by doing tricks with permissions",
        [ "chown", "chmod", "cp", "mv" ]
    ],
    [
        "let you read the flag because they let you program anything",
        [ "perl", "python", "ruby", "bash" ]
    ],
    [
        "just straight up weren't designed to let you read files",
        [ "date", "dmesg", "wc", "gcc", "as", "wget" ]
    ],
    # todo: consider custom stuff that's abusable via path and such for the future
    [
        "show you how dangerous it is to allow users to load their own code as plugins into the program (but figuring out how is the hard part!)",
        [ "ssh-keygen" ]
    ]
]

ALL_CHALS = [ (c,b) for c,bl in CATEGORIZED_CHALS for b in bl ]

with open("/challenge/.config") as f:
    level = int(f.read())

concept, utility = ALL_CHALS[level - 1]

print(f"""
Welcome to {sys.argv[0]} (level {level})!

This challenge is part of a series of programs that
{concept}.

I am setting the SUID bit on the {utility} program (in your PATH at
/challenge/bin/{utility}.) Try to use it to read the flag!

IMPORTANT: make sure to run me (/challenge/babysuid) every time that you
restart this challenge container to make sure that I set the SUID bit!
""".strip())

if not os.path.exists("/challenge/bin"):
    os.makedirs("/challenge/bin")
if not os.path.isfile(f"/challenge/bin/{utility}"):
    assert shutil.copy2(shutil.which(utility), f"/challenge/bin/{utility}")
os.chmod(f"/challenge/bin/{utility}", 0o4755)
