#!/opt/pwn.college/python

import flask
import os

app = flask.Flask(__name__)


import pathlib
import psutil


# This function determines the process that is on the
# other side of the file descriptor we pass in.
def peer_process_of(fd):
    server_connection = next(connection for connection in psutil.Process().connections() if connection.fd == fd)
    client_connection = next(
        connection
        for connection in psutil.net_connections()
        if connection.raddr == server_connection.laddr and connection.laddr == server_connection.raddr
    )
    return psutil.Process(client_connection.pid)


# This function returns the filename of a peer process for a given
# file descriptor, verifying that the path is owned by root and
# not open to shenanigans.
def name_of_program_for(process):
    client_path = pathlib.Path(process.exe())
    for p in reversed(client_path.parents):
        if not p.owner() == "root":
            return None
        if p in ("/home", "/tmp", "/var/tmp", "/dev/shm"):
            return None
    return client_path.stem


import string


@app.route("/~hacker/<path:path>", methods=["GET"])
def public_html(path="index.html"):
    return flask.send_from_directory("/home/hacker/public_html", path)


@app.route("/pass", methods=["GET"])
def challenge():
    if peer_process_of(flask.request.input_stream.fileno()).username() != "root":
        flask.abort(
            400,
            f"""
              This page must be accessed using a browser run by the root user.
              Usually, this means you would run the scripted browser in /challenge/client or /challenge/victim,
              and it'll access this page for you.
              Of course, this sort of functionality doesn't exist on the actual web, as google.com can't access
              your user ID on your local machine, but we use this hack here for teaching purposes.
        """,
        )

    if flask.request.args.get("authcode", None) != "kqpzyyer":
        flask.abort(403, "Incorrect value for get parameter authcode!")

    if flask.request.args.get("unlock", None) != "peneflau":
        flask.abort(403, "Incorrect value for get parameter unlock!")

    if flask.request.args.get("token", None) != "zfjbanwg":
        flask.abort(403, "Incorrect value for get parameter token!")

    response = flask.Response(open("/flag").read().strip(), content_type="text/plain")
    return response


app.secret_key = os.urandom(8)
app.config["SERVER_NAME"] = "challenge.localhost:80"
app.run("challenge.localhost", 80)
